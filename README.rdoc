README

LINK TO HEROKU : 
==== 
scribbar.herokuapp.com/

======

FINAL PROJECT
----------

For my final project I made an convenient but easy-to-use notetaking app. Mostly meant for students, this app enables its users to store their
notes for their classes arranged according to respective notebooks. Thus, as they go about their day to day classes, they have an
efficient way of keeping track of their notes for all their classes.

Gems : This app makes use of the Devise Gem to authorize users. It helps with signing in and signing up and ensuring that users
are authorized before they can access their notes and notebooks. Documentation is available at http://devise.plataformatec.com.br/

Addons : This app makes use of two different addons. The first is the New Relic Addon for performance and monitoring. New relic
enables you to know the perfomance of your app by monitoring the end user experience and how users are interacting with the app.
Documentation is available at : https://docs.newrelic.com/docs

Additionally, the app uses the Loggly addon for heroku log retention. This enables you to retain previous logs as data mainly to help in
debugging and informational purposes. Documentation is available at : http://www.loggly.com/docs/docs-index/

Database Structure and resources : This app has three different resources : Notes, Notebooks and Users. Every User has a Notebook set 
and a Note set. Additionally, every Notebook has a Note set making every Note have to belong to a notebook.
 
Validations: The app uses several validations in the creation and authentication of users, and the creation of notes. 
In user creation:

Two password fields are used for confirmation of the right password. 

Additionally, the password must contain a minimum of eight characters, this helps with getting better secure passwords from users

Also, the email field is checked to make sure it matches a required email format, and it is also checked to make sure the database
does not already contain the same email.
Scope : The app uses a scope to query the database to find incomplete notes, notes which were started by the user (named) but have no
note-body. These incomplete notes are placed in the notes index view to enable users to prompt users to further edit them instead of 
creating an unnecessary number of empty notes.

The CSS features make the site more attractive and Jquery is used to make the Note Accordion in Notes index, and also to preview new notes




----------
----------
=================================

HomeWork 10
----------

** Added a Jquery text preview area that automatically updates with each user keystroke, for when a user is creating a note.

Problems
--
None

=============================

HomeWork 9
----------

**Added new scope to show incomplete notes that the user has not completed

**Added views to show these notes, so that the user could then complete those notes or delete them if he wanted.

Problems
--
None


=============================

HomeWork 8
----------

**Added New Relic Addon to app, for performance and monitoring.

**Added Loggly Addon to app, for log retention.

Problems
--
None

==============================

HomeWork 7
---------

Added the gem Devise.

Configured app to use Devise gem for authorization of users.

Incorporated features of the Devise gem to use to assign current logged in users to notes and notecollections/books automatically, and incorporated security to prevent different users from accessing other notes

Added a login and logout button to navigation bar.

Added users name as link to homepage on navigation bar.

===========================================================================

HomeWork 6
----------


-All names in the App (names of Authors, NoteCollections, Notes) must be present

-Note body must have a minimum of 20 characters

-All names in the App (names of Authors, NoteCollections, Notes) must be unique 

CSS styling (extra credit)

-Creating an individual note renders a classic real life notebook for the note body's text input

-Made all forms look prettier

Problems
None

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Problems, HW5

Works fine.

What I did HW5
- Added relationships between the three different models and controllers present. Notes can be created, a note belongs to a
certain notebook, a notebook belongs to a certain user.
Problems, HW4

The attribute accessible option does not work on rails 4
Problems, HW2

- None
Problems from initial setup

- Needed to run 'bundle update' each time the gemfile was changed before heroku would accept the push.
- Needed to add the gem 'rails_12factor' to gemfile for heroku to be able to deploy the app.
- Needed to add the ruby version to the app too for heroku.
This README would normally document whatever steps are necessary to get the application up and running.

Things you may want to cover:

Ruby version

System dependencies

Configuration

Database creation

Database initialization

How to run the test suite

Services (job queues, cache servers, search engines, etc.)

Deployment instructions

â€¦

Please feel free to use a different markup language if you do not plan to run rake doc:app.
